package com.itwill.sida.controller;

import java.io.File;
import java.io.FileOutputStream;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.itwill.sida.dto.Member;
import com.itwill.sida.service.MemberService;

@Controller
public class MemberController {
	public static final String LOCAL_FILE_SAVE_PATH= "C:"+File.separator+"08"+File.separator+"spring_workspace"+File.separator+"Sida"+File.separator+"Sida_prj"+File.separator+"src"+File.separator+"main"+File.separator+"webapp"+File.separator+"resource"+File.separator+"localImg"+File.separator;
	public static final String LOCAL_FILE_LOAD_PATH= "localImg"+File.separator;
	// 08 수정
	@Autowired
	public MemberService memberService;

	public void setMemberService(MemberService memberService) {
		this.memberService = memberService;
	}

	@RequestMapping(value="/profile", method=RequestMethod.GET)
	public String profile(Model model, HttpSession session){
		if(session.getAttribute("sMember")==null){
			return "redirect:login";
		}
		model.addAttribute("path", "profile.jsp");
		return "index";
	}
	
	@RequestMapping(value = "/imgRegist")
	public String process(@RequestParam("userImg") MultipartFile userImg, HttpSession session, Model model) {
		String forwardPath = "index";
		if(session.getAttribute("sMember")==null)
			return "redirect:login";
		Member sMember = (Member) session.getAttribute("sMember");
		String imgName = userImg.getOriginalFilename().split("[.]")[0];
		String imgType = userImg.getOriginalFilename().split("[.]")[1];
		
		switch(imgType){
			case "jpg": case "png": case "jpeg": case "bmp" : 
				writeFile(userImg, LOCAL_FILE_SAVE_PATH, sMember.getM_name()+"_"+imgName+"."+imgType);
				String imgPath = LOCAL_FILE_LOAD_PATH+sMember.getM_name()+"_"+imgName+"."+imgType;
				sMember.setM_image(imgPath);
				memberService.insertImg(sMember);
				session.setAttribute("sMember", sMember);
				model.addAttribute("path", "dashBoard.jsp");
				break;
			default :
				model.addAttribute("msg","You will be able to upload photos");
				model.addAttribute("path", "accountSetting.jsp");
				break;
		}
		return forwardPath;
	}

	private void writeFile(MultipartFile file, String path, String fileName) {
		FileOutputStream fos = null;
		try {
			byte fileData[] = file.getBytes();
			fos = new FileOutputStream(path + fileName);
			fos.write(fileData);
		} catch (Exception e) {
			e.printStackTrace();

		} finally {
			if (fos != null) {
				try {
					fos.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

	}
	
	@RequestMapping(value = "pwdChange", produces = "application/json; charset=utf-8")
	public @ResponseBody String pwdCheck(@RequestParam("asIsPwd") String asIsPwd,
			@RequestParam("toBePwd") String toBePwd, HttpSession session) {
		Member sMember = (Member) session.getAttribute("sMember");
		try {
			if (sMember == null)
				throw new Exception();
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (sMember.getM_pwd().equals(asIsPwd)) {
			sMember.setM_pwd(toBePwd);
			memberService.pwdChange(sMember);
			session.setAttribute("sMember", sMember);
			return "{\"pwdEqul\":true}";
		} else {
			return "{\"pwdEqul\":false}";
		}
	}

	@RequestMapping(value = "accountSetting", produces = "application/json; charset=utf-8")
	public String accountSettingForm(HttpSession session, Model model) {
		Member sMember = (Member) session.getAttribute("sMember");
		String forwardPath = "";
		try {
			if (sMember == null)
				return "redirect:login";
			Member rtnMember = memberService.findMemberByEmail(sMember.getM_email());
			model.addAttribute("path", "accountSetting.jsp");
			model.addAttribute("member", rtnMember);
		} catch (Exception e) {
			return "redirect:login";
		}
		return "index";
	}

	@RequestMapping(value = "/emailCheck", produces = "application/json; charset=utf-8")
	public @ResponseBody String emailCheck(@RequestParam("email") String email) {
		String returnText = null;
		Member member = memberService.findMemberByEmail(email);
		if (member == null) {
			returnText = "{\"data\":\"E-mail is available\",\"flag\":true}";
		} else {
			returnText = "{\"data\":\"E-mail is Unavailable\",\"flag\":false}";
		}
		return returnText;
	}

	@RequestMapping("/joinMember")
	public String joinMember(@ModelAttribute("member") Member member) {
		String forwradPath = "";
		try {
			forwradPath = "login";
			memberService.joinMember(member);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return forwradPath;
	}

	@RequestMapping("/login")
	public String login(Model model) {
		return "login";
	}

	@RequestMapping("/logout")
	public ModelAndView logout(HttpSession session) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("login");
		session.invalidate();
		return mv;
	}

	@RequestMapping(value = "/loginCheck", produces = "application/json")
	public @ResponseBody String loginCheck(@RequestParam("email") String email,
			@RequestParam(value = "pwd", required = true) String pwd, HttpSession session) throws Exception {
		String returnText = null;
		String flag = memberService.login(email, pwd);
		switch (flag) {
		case "emailErr":
			returnText = "{\"data\":\"Check Email\",\"stat\":false}";
			break;
		case "pwdErr":
			returnText = "{\"data\":\"Check Password\",\"stat\":false}";
			break;
		case "success":
			returnText = "{\"data\":\"Success Login\",\"stat\":true}";
			session.setAttribute("sMember", memberService.getMember(email, pwd));
			break;
		}
		return returnText;
	}
}
